const std = @import("std");

pub const OpCode = enum(u8) {
    unreach = 0x00,
    nop,
    block,
    loop,
    ifOp,
    elseOp,

    end = 0x0B,
    br,
    brIf,
    brTable,
    ret,
    call,
    callIndirect,

    drop = 0x1A,
    select,

    localGet = 0x20,
    localSet,
    localTee,
    globalGet,
    globalSet,

    i32Load = 0x28,
    i64Load,
    f32Load,
    f64Load,
    i32load8Signed,
    i32load8Unsigned,
    i32load16Signed,
    i32load16Unsigned,
    i64load8Signed,
    i64load8Unsigned,
    i64load16Signed,
    i64load16Unsigned,

    i32Store,
    i64Store,
    f32Store,
    f64Store,
    i32Store8,
    i32Store16,
    i64Store8,
    i64Store16,
    i64Store32,

    memorySize,
    memoryGrow,

    i32Const = 0x41,
    i64Const,
    f32Const,
    f64Const,

    i32EqualsZero,
    i32Equals,
    i32NotEqual,
    i32LessThanSigned,
    i32LessThanUnsigned,
    i32GreaterThanSigned,
    i32GreaterThanUnsigned,
    i32LessThanOrEqualSigned,
    i32LessThanOrEqualUnsigned,
    i32GreaterThanOrEqualSigned,
    i32GreaterThanOrEqualUnsigned,

    i64EqualsZero,
    i64Equals,
    i64NotEqual,
    i64LessThanSigned,
    i64LessThanUnsigned,
    i64GreaterThanSigned,
    i64GreaterThanUnsigned,
    i64LessThanOrEqualSigned,
    i64LessThanOrEqualUnsigned,
    i64GreaterThanOrEqualSigned,
    i64GreaterThanOrEqualUnsigned,

    f32Equals,
    f32NotEqual,
    f32LessThan,
    f32GreaterThan,
    f32LessThanOrEqual,
    f32GreaterThanOrEqual,

    f64Equals,
    f64NotEqual,
    f64LessThan,
    f64GreaterThan,
    f64LessThanOrEqual,
    f64GreaterThanOrEqual,

    i32CountLeadingZero,
    i32CountTrailingZero,
    i32CountNonZero,
    i32Add,
    i32Subtract,
    i32Multiply,
    i32DivideSigned,
    i32DivideUnsigned,
    i32RemainderSigned,
    i32RemainderUnsigned,
    i32And,
    i32Or,
    i32Xor,
    i32ShiftLeft,
    i32ShiftRightSigned,
    i32ShiftRightUnsigned,
    i32RotateLeft,
    i32RotateRight,

    i64CountLeadingZero,
    i64CountTrailingZero,
    i64CountNonZero,
    i64Add,
    i64Subtract,
    i64Multiply,
    i64DivideSigned,
    i64DivideUnsigned,
    i64RemainderSigned,
    i64RemainderUnsigned,
    i64And,
    i64Or,
    i64Xor,
    i64ShiftLeft,
    i64ShiftRightSigned,
    i64ShiftRightUnsigned,
    i64RotateLeft,
    i64RotateRight,

    f32Absolute,
    f32Negate,
    f32Ceiling,
    f32Floor,
    f32Truncate,
    f32Nearest,
    f32SquareRoot,
    f32Add,
    f32Subtract,
    f32Multiply,
    f32Divide,
    f32Mininum,
    f32Maximum,
    f32CopySign,

    f64Absolute,
    f64Negate,
    f64Ceiling,
    f64Floor,
    f64Truncate,
    f64Nearest,
    f64SquareRoot,
    f64Add,
    f64Subtract,
    f64Multiply,
    f64Divide,
    f64Mininum,
    f64Maximum,
    f64CopySign,

    i32WrapI64,
    i32TruncateF32Signed,
    i32TruncateF32Unsigned,
    i32TruncateF64Signed,
    i32TruncateF64Unsigned,

    i64ExtendI32Signed,
    i64ExtendI32Unsigned,
    i64TruncateF32Signed,
    i64TruncateF32Unsigned,
    i64TruncateF64Signed,
    i64TruncateF64Unsigned,

    f32ConvertI32Signed,
    f32ConvertI32Unsigned,
    f32ConvertI64Signed,
    f32ConvertI64Unsigned,
    f32DemoteF64,

    f64ConvertI32Signed,
    f64ConvertI32Unsigned,
    f64ConvertI64Signed,
    f64ConvertI64Unsigned,
    f64PromoteF32,

    i32ReinterpretF32,
    i64ReinterpretF64,
    f32ReinterpretI32,
    f64ReinterpretI64,
};

test "OpCode" {
    const equals = std.testing.expectEqual;

    try equals(@enumToInt(OpCode.callIndirect), 0x11);
    try equals(@enumToInt(OpCode.i32Load), 0x28);
    try equals(@enumToInt(OpCode.i32CountLeadingZero), 0x67);
    try equals(@enumToInt(OpCode.i32WrapI64), 0xA7);
    try equals(@enumToInt(OpCode.f64ReinterpretI64), 0xBF);
}
